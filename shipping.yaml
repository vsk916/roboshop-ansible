- name: shipping
  hosts: shipping
  become: yes
  vars:
    mysql_password: RoboShop@1
  tasks:
  - name: install maven
    ansible.builtin.package:
      name: maven
      state: present
  
  - name: create user
    ansible.builtin.user:
      name: roboshop

  - name: create app directory
    ansible.builtin.file:
      path: /app
      state: directory
  
  - name: Download the application url
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /tmp
  
  - name: Extract the application 
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes

  - name: install the dependencies and rename jar file
    ansible.builtin.shell: mvn clean package; mv target/shipping-1.0.jar shipping.jar
    args:
      chdir: /app
  
  # - name: rename jar file
  #   ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar
  #   args:
  #     chdir: /app
  
  - name: copy shipping service file
    ansible.builtin.file:
      src: shipping.service
      dest: /etc/systemd/system

  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true
  
  - name: start and enable the service
    ansible.builtin.service:
      name: shipping
      state: started
      enabled: yes

  - name: check cities schema exists or not
    ansible.builtin.command:  mysql -h mysql.daws76s.online -uroot -p{{mysql_password}} -sN -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'cities'"
    register: schema

  - name: print output
    ansible.builtin.debug:
      msg: "schema output: {{schema}}"

  - name: load cities data
    ansible.builtin.shell: "mysql -h mysql.daws76s.online -uroot -p{{mysql_password}}  < /app/schema/shipping.sql"
    when: schema.stdout != "1"

  - name: start and enable shipping
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes

  